/*
 * Find the next lexicographic permutation given one permutation.
 *
 * The following algorithm generates the next permutation lexicographically
 * after a given permutation. It changes the given permutation in-place.
 *
 * - Find the largest index k such that a[k] < a[k + 1]. If no such index exists,
 *   the permutation is the last permutation.
 * - Find the largest index l such that a[k] < a[l].
 * - Swap the value of a[k] with that of a[l].
 * - Reverse the sequence from a[k + 1] up to and including the final element a[n].
 *
 * There is a nice explanation of the method at
 * http://nayuki.eigenstate.org/page/next-lexicographical-permutation-algorithm
 */
#include <stdio.h>
#include <stdbool.h>

#define TRUE 1
#define FALSE 0

static void
print_array (unsigned short *array, unsigned short n)
{
    unsigned short i;

    for (i = 0; i < n; i++) {
         printf("%u ", array[i]);
    }
    printf("\n");
}

bool
next_lexicographic_permutation (unsigned short *array, unsigned short n)
{
    unsigned short k, l, temp;

    k = n - 1;
    while (k > 0 && array[k] < array[k - 1]) { //Find the highest index such that a[k] < a[k+1]
        k--;
    }
    if (k == 0) { //This is the last permutation
        return (FALSE);
    }
    l = k;
    while (l < n && array[l] > array[k - 1]) { //Find the largest index l such that a[k] < a[l].
        l++;
    }
    temp = array[k - 1];
    array[k - 1] = array[l - 1];
    array[l - 1] = temp;

    //Reverse a[k + 1] to a[n]
    l = n - 1;
    while (l > k) {
         temp = array[k];
         array[k] = array[l];
         array[l] = temp;
         l--; k++;
    }

    print_array(array, n);
    return (TRUE);
}

int
main (void)
{
    unsigned short array[4] = {1, 2, 3, 4};
    bool rc;

    print_array(array, 4);
    while (TRUE) {
         if (next_lexicographic_permutation(array, 4) != TRUE) {
             return (1);
         }
     }
}
